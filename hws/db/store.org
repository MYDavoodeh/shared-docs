# -*- eval: (add-hook 'after-save-hook 'org-babel-tangle nil t); org-latex-default-figure-position: H; -*-
#+TITLE: پایگاه دادهٔ یک فروشگاه اینترنتی
#+AUTHOR: @@latex:\rl{@@محمدیاسین داوده@@latex:}@@
#+PROPERTY: header-args:sql :engine mysql :exports both :tangle "store.sql" :comments link :session sql :database sakila
#+STARTUP: fold
#+LANGUAGE: fa
#+LATEX_HEADER: \usepackage{xepersian}\settextfont{XB Roya}\setlatintextfont{XB Roya}\setmonofont{Iosevka}
#+LATEX_HEADER: \xpretocmd{\verbatim}{\begin{LTR}}{}{} \xapptocmd{\endverbatim}{\end{LTR}}{}{} \xpretocmd{\minted}{\VerbatimEnvironment\begin{LTR}}{}{} \xapptocmd{\endminted}{\end{LTR}}{}{}
#+LATEX_HEADER: \xpretocmd{\tabular}{\begin{latin}}{}{} \xapptocmd{\endtabular}{\end{latin}}{}{}
#+LATEX_HEADER: \SetupFloatingEnvironment{listing}{name=کد}
#+MACRO: lr @@latex:\lr{@@​$1​@@latex:}@@
#+MACRO: lt @@latex:\lr{@@​~$1~​@@latex:}@@
#+MACRO: filename (eval (concat "[[file:" (file-name-sans-extension (buffer-name)) $1 "]]"))

* جزئیات و توضیحات
این برگه به شرح طراحی اولیهٔ پایگاه داده‌ای برای یک فروشگاه اینترنتی می‌پردازد.[fn:orgnote:این فایل خروجی اتوماتیک فایل {{{filename(.org)}}} است. برای اجرای تعاملی کدها فایل را باز کرده هر بخش آنرا ویرایش کنید یا از کدها خروجی گرفته آنها را به یک فایل واحد قابل اجرا تبدیل کنید. فایل ~.org~ فایلی متنی است که با اورگ-مد ایمکس باز می‌شود.]

فیلدهایی که به صورت ~x_at~ هستند تاریخ/تایم‌استمپ را نشان می‌دهند.
فیلدهایی که به صورت ~x_id~ هستند به عنوان کلید خارجی عمل می‌کنند.

موجودیت‌های اولیه به شرح زیر است:
- محصول
- دسته‌بندی
- کاربر
- نقش
- انبار
- سفارش

** دیاگرام‌ها

#+begin_src plantuml :file .store-entity.png
entity Product {
    id : integer <<generated>>
    --
}
#+end_src

#+CAPTION: کلاس دیاگرام موجودیت‌ها
#+RESULTS:
[[file:.reservation-classes.png]]

* پیاده‌سازی

** شمایه

#+CAPTION: حذف پایگاه دادهٔ قبلی احتمالی
#+begin_src sql :results none :exports code
DROP DATABASE hw_db_reservation;
#+end_src

#+CAPTION: ساخت پایگاه داده
#+begin_src sql :database :results none :exports code
CREATE DATABASE hw_db_reservation;
USE hw_db_reservation;
#+end_src

#+CAPTION: ساخت جداول
#+begin_src sql :exports code
CREATE TABLE employees (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    fname VARCHAR(20) NOT NULL,
    lname VARCHAR(20) NOT NULL
);

CREATE TABLE foods (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    ingredients VARCHAR(20),
    available SMALLINT,
    updated_at TIMESTAMP NULL
);

CREATE TABLE halls (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(20),
    capacity SMALLINT,
    updated_at TIMESTAMP NULL
);

CREATE TABLE reservations (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    employee_id SMALLINT UNSIGNED NOT NULL,
    voted_for SMALLINT UNSIGNED NOT NULL,
    food_id SMALLINT UNSIGNED,
    hall_id SMALLINT UNSIGNED,
    taken_at TIMESTAMP NULL,
    exited_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (employee_id) REFERENCES employees(id),
    FOREIGN KEY (hall_id) REFERENCES halls(id),
    FOREIGN KEY (voted_for) REFERENCES foods(id),
    FOREIGN KEY (food_id) REFERENCES foods(id)
);
#+end_src

#+NAME: show_tables
#+CAPTION: خروجی جداول ساخته شده
#+begin_src sql :exports both
SHOW TABLES;
#+end_src

#+RESULTS: show_tables
| Tables_in_hw_db_reservation |
|-----------------------------|
| employees                   |
| foods                       |
| halls                       |
| reservations                |
                             
** داده‌ها

*** مقداردهی

#+CAPTION: داده‌های اولیه
#+begin_src sql :results none
INSERT INTO foods (name, ingredients)
VALUES ('Burger', 'meat,cheese,tomato'), ('Cheese sandwich', 'cheese,tomato');

INSERT INTO employees (fname, lname)
VALUES ('Ali', 'Alipour'), ('Mamad', 'Mamadi');

INSERT INTO halls (name, capacity)
VALUES ('Western', 30), ('Eastern', 40);    
#+END_SRC

#+CAPTION: سفارش‌های فرضی هر دو کارمند همبرگر را برای هفتهٔ بعد انتخاب کرده‌اند.
#+begin_src sql :results none
INSERT INTO reservations (employee_id, voted_for)
VALUES (1, 1), (2, 1);
#+end_src

*** کوئری

فرض می‌کنیم که گوشت موجود نبود و آشپز ساندویچ پنیر آماده ({{{lr(Supply)}}}) می‌کند.
پس از این تمام سفارشات آن هفته را به ساندویچ پنیر تغییر می‌دهد ({{{lt(lock(1\, 2))}}}: سفارشات یک کارمندان را روی دو قفل کن).

#+CAPTION: اعلام موجودی آشپز برای هر تعداد فردی که از هفته گذشته تا کنون غذا تحویل نگرفته‌اند و سفارش همبرگر داشته‌اند.
#+begin_src sql :results none
UPDATE foods
   SET available=(
        SELECT COUNT(*)
          FROM reservations
         WHERE food_id IS NULL
           AND voted_for=1
           AND created_at BETWEEN now() - INTERVAL 1 WEEK AND now()
       )
 WHERE id=2;
#+end_src

#+CAPTION: وضعیت جدول غذاها
#+begin_src sql
SELECT *
  FROM foods;
#+end_src

#+RESULTS:
| id | name            | ingredients        | available | updated_at |
|----+-----------------+--------------------+-----------+------------|
|  1 | Burger          | meat,cheese,tomato | NULL      | NULL       |
|  2 | Cheese sandwich | cheese,tomato      | 2         | NULL       |
 
#+CAPTION: قفل کردن سفارشات همبرگر و پنیر هفته گذشته تا کنون که تحویل نگرفته شده‌اند ({{{lt(lock(1\, 2))}}} و {{{lt(lock(1\, 1))}}} در سیکوئل).
#+begin_src sql :results none
UPDATE reservations
   SET food_id=2
 WHERE voted_for IN (1,2)
   AND food_id IS NULL
   AND created_at BETWEEN now() - INTERVAL 1 WEEK AND now();
#+end_src

#+CAPTION: وضعیت جدول سفارشات
#+begin_src sql
SELECT *
  FROM reservations;
#+end_src

#+RESULTS:
| id | employee_id | voted_for | food_id | hall_id | taken_at | exited_at | created_at          |
|----+-------------+-----------+---------+---------+----------+-----------+---------------------|
|  1 |           1 |         1 |       2 | NULL    | NULL     | NULL      | 2020-11-08 01:59:20 |
|  2 |           2 |         1 |       2 | NULL    | NULL     | NULL      | 2020-11-08 01:59:20 |

#+CAPTION: وضعیت جدول سالن‌ها
#+begin_src sql
SELECT *
  FROM halls;
#+end_src

#+RESULTS:
| id | name    | capacity | updated_at |
|----+---------+----------+------------|
|  1 | Western |       30 | NULL       |
|  2 | Eastern |       40 | NULL       |

#+CAPTION: وضعیت جدول کارمندان
#+begin_src sql
SELECT *
  FROM employees;
#+end_src

#+RESULTS:
| id | fname | lname   |
|----+-------+---------|
|  1 | Ali   | Alipour |
|  2 | Mamad | Mamadi  |

#+CAPTION: Describe all tables
#+begin_src elisp :exports results :noweb yes :results output :wrap SRC sql
(dolist (table (cddr (quote <<show_tables()>>)))
  (princ (concat "DESCRIBE " (car table) ";\n")))
#+end_src

#+RESULTS:
#+begin_SRC sql :exports both
DESCRIBE employees;
DESCRIBE foods;
DESCRIBE halls;
DESCRIBE reservations;
#+end_SRC

#+CAPTION: جزئیات جداول
#+RESULTS:
| Field       | Type                 | Null | Key | Default             | Extra          |
|-------------+----------------------+------+-----+---------------------+----------------|
| id          | smallint(5) unsigned | NO   | PRI | NULL                | auto_increment |
| fname       | varchar(20)          | NO   |     | NULL                |                |
| lname       | varchar(20)          | NO   |     | NULL                |                |
| Field       | Type                 | Null | Key | Default             | Extra          |
| id          | smallint(5) unsigned | NO   | PRI | NULL                | auto_increment |
| name        | varchar(20)          | NO   |     | NULL                |                |
| ingredients | varchar(20)          | YES  |     | NULL                |                |
| available   | smallint(6)          | YES  |     | NULL                |                |
| updated_at  | timestamp            | YES  |     | NULL                |                |
| Field       | Type                 | Null | Key | Default             | Extra          |
| id          | smallint(5) unsigned | NO   | PRI | NULL                | auto_increment |
| name        | varchar(20)          | YES  |     | NULL                |                |
| capacity    | smallint(6)          | YES  |     | NULL                |                |
| updated_at  | timestamp            | YES  |     | NULL                |                |
| Field       | Type                 | Null | Key | Default             | Extra          |
| id          | smallint(5) unsigned | NO   | PRI | NULL                | auto_increment |
| employee_id | smallint(5) unsigned | NO   | MUL | NULL                |                |
| voted_for   | smallint(5) unsigned | NO   | MUL | NULL                |                |
| food_id     | smallint(5) unsigned | YES  | MUL | NULL                |                |
| hall_id     | smallint(5) unsigned | YES  | MUL | NULL                |                |
| taken_at    | timestamp            | YES  |     | NULL                |                |
| exited_at   | timestamp            | YES  |     | NULL                |                |
| created_at  | timestamp            | NO   |     | current_timestamp() |                |
